// Code generated by go-bindata.
// sources:
// data/bash
// data/fish
// data/sh
// data/zsh
// DO NOT EDIT!

package cmd

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataBash = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xc1\x6a\xc3\x30\x10\x44\xef\xfb\x15\xdb\xad\x0e\xc9\x21\xe4\x03\x82\x0f\xa6\x2e\xc1\x10\xc7\xc2\xa4\xc9\xa1\x94\x45\x49\x95\xd8\x20\x5b\x41\x51\x74\x29\xfd\xf7\x62\xb9\xd0\xd6\x18\xaa\x8b\x24\x56\x33\xf3\x46\x8f\x0f\xcb\x63\xd3\x2d\x8f\xea\x56\x03\x30\x87\x0b\x3b\x6d\xac\x7a\x9f\xcd\xf1\x03\x10\x11\x65\x55\x16\x72\xc7\x4f\x65\x51\xa4\xdb\x2c\x11\xbc\xcf\xab\xdd\x4b\xba\x59\x97\x5c\x56\xf9\x3a\xdf\xa6\x1b\xfe\xfb\x26\xca\x74\x50\x06\x49\xcc\xc2\x65\x38\x2e\x16\xb7\x5a\x1b\x83\x7d\xd0\x9c\xe0\x13\x80\x65\xf5\xbc\xff\xe5\x26\x0f\x59\x42\xf4\x0d\x71\x75\xb6\xbd\x7a\x3e\xd9\xb6\x55\xdd\x0f\x4c\x73\xc6\x57\x24\x21\x0f\x19\x61\x82\x24\x26\x3c\x08\xdf\x56\xe8\x6b\xdd\x45\x41\xbf\x9c\xf6\x77\x37\x5c\xcf\x4d\xdc\x26\xa3\xa3\x2b\x0c\xf3\x1e\x41\xdd\xbd\x65\x75\xf2\x4d\x50\x5e\x47\xe0\x7f\x9b\x27\x62\xf4\x13\xa3\x31\x4d\x74\xc3\x15\x8e\x54\x04\x5f\x01\x00\x00\xff\xff\xac\x8d\x83\x2a\x95\x01\x00\x00")

func dataBashBytes() ([]byte, error) {
	return bindataRead(
		_dataBash,
		"data/bash",
	)
}

func dataBash() (*asset, error) {
	bytes, err := dataBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/bash", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataFish = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x59\x7b\x6f\xdb\x38\x12\xff\x3f\x9f\x62\xea\x1a\x88\xbd\x80\xe2\x4b\xee\xbf\x2d\x72\x40\xba\x29\xda\x00\x6d\x13\xa4\xed\x2e\x0e\xbd\x56\xa0\xa5\xb1\x4c\x84\x26\xb5\x24\xa5\xc4\x8b\x7c\xf8\x03\x49\x3d\x48\x89\x79\xec\xae\xba\x06\x0a\x37\xe4\xbc\x38\x8f\xdf\x0c\xe9\x97\x2f\x56\x6b\xca\x57\x1b\xaa\xb6\xab\x83\x83\x4d\xc5\x33\x4d\x05\x87\xba\x38\x00\x00\xa0\x1b\xe0\x42\x43\x26\x2a\xae\x61\x4e\x64\x51\xc3\x7f\x60\x95\x63\xbd\xe2\x15\x63\x96\xc4\x7c\x32\xb1\xdb\x11\x9e\xb7\x5c\xe6\x23\x51\x57\x92\xdb\x3f\x91\xe7\xf6\xfb\x25\x60\xb6\x15\x4e\xcc\xd7\xe3\x6f\x76\x4d\xdd\x52\x9d\x6d\xc3\x35\x2b\x91\x28\x04\xca\xa9\xee\x56\xcc\x27\xad\x8b\xd4\x2c\xb6\xf4\x47\x47\xc9\x90\x87\x64\x9a\xd6\x44\xe3\x88\xaf\xdd\x78\x84\x37\xc7\x07\xb9\x23\x5b\x96\x25\xcb\x4b\x92\xdd\x90\x02\xd5\x88\x25\xb2\xd5\x68\x51\x5a\x8a\x7d\x44\x85\x5d\x7f\xc4\xbe\x82\x89\x35\x61\x6f\xee\x30\x1b\x31\xf7\x5b\x8f\xf0\x57\x65\x21\x49\x3e\x3e\xdc\x70\xdd\x12\x1f\xfe\x74\x18\x10\xf6\x31\x76\x1a\xba\xd0\x9a\x7f\x5e\xe6\xb4\x31\x3a\x88\x3b\xde\x2e\xd7\x05\x30\xca\x6f\x1c\x6b\xc0\x39\x70\x1a\xdd\xc0\x57\x48\xfe\x80\xd9\xfc\xd7\x8b\xeb\xcf\x5f\xce\xde\xbf\xbd\x9c\x41\x7f\x2a\x9b\x4f\x6f\xa4\x14\xf2\x67\xf8\x28\xa0\xa6\x52\x57\x84\x15\x02\x6e\x85\xbc\x51\x25\xc9\x10\xa8\x72\x29\x81\x40\x34\xe8\x2d\xc2\x4e\xec\x90\xf7\x69\x55\x17\xb0\x45\x56\xc6\x02\xe9\x52\x18\x8e\x83\x24\xce\x72\xe8\x6d\x49\xaf\xce\x3e\xbf\x5b\x29\x99\xad\x22\x47\x09\x12\xc6\x1d\x84\x3f\x74\x90\x48\x8a\x59\x81\x1d\xeb\xc2\x2b\xc1\x25\x24\x4c\xc3\x89\xc7\xae\x50\x83\x8d\xfa\xc9\x37\x58\xac\x89\x42\x4e\x76\x08\xf3\xab\xdf\xce\x97\xa1\x2c\x43\xd8\xfb\x66\x51\x17\xb6\xc6\x3e\xa1\xd6\x94\x17\xaa\x49\x9d\x13\x9b\x3a\xcb\x9e\x23\x29\xee\xa0\x33\x1b\xe6\x9d\x80\x83\x2e\x06\x67\xce\x72\xca\x0b\xcf\x3b\x1d\x7f\x5d\x48\xdf\x69\xd7\x97\x97\x9f\x61\xfe\xee\xf2\xc3\x9b\x55\x17\xb1\xb8\x2e\xeb\x5f\x98\xd7\x85\xfc\x7a\xfc\x6d\xe5\x49\x0e\xc8\xd3\x9e\xfe\xf2\xfd\xf9\xdb\x4b\xc7\xe4\xbe\x07\xce\x7f\x7b\xf9\xfa\xe2\xe3\x6c\xe0\xb9\x98\x8c\xd7\x17\x1f\xc1\x51\xbb\x43\x32\x85\xcf\xe3\x89\x19\x63\x10\x76\x1c\x87\xb1\x08\x67\xb8\x35\xbb\xa3\x72\x85\x9d\x6e\x08\x63\x6b\x92\xdd\xd8\x98\xfd\x5e\xa1\xdc\xb7\x41\x5b\x7a\x59\x32\x1f\x52\x9f\x82\x96\x15\x46\xce\xdb\x7a\x29\x74\xf5\xcf\xbe\xd7\xa2\x67\x8e\xf3\xc5\x0f\xd7\x78\x64\x50\x2d\xc6\x17\x96\x6c\x77\x93\x53\x09\x49\x19\xaf\xa7\x90\xc2\x45\x22\x90\xde\x46\xd9\xea\xe8\x7d\x16\x41\x8c\xf4\xfc\xe2\xd3\xd9\xeb\xf7\x6f\xd2\xab\xeb\xcb\x0f\x57\x9f\xfd\xf0\xb7\x05\xab\x20\xc9\xc0\xf4\xc0\xb4\x94\x62\x57\x6a\x48\x05\xcb\x53\x6f\x61\xc4\x01\xb1\xcd\xae\x1e\x4c\xb2\x2d\x7a\x0b\x96\x30\x0b\x41\xf7\x21\xe9\x2d\xca\xb4\xdf\x75\xd1\x35\xb4\x6b\x24\x2c\x82\x32\x03\xd4\xf8\xe7\x00\x33\xd2\x11\x47\x80\xd9\x03\xc4\x79\x4b\x3d\x80\x88\x3e\xa4\x5d\xbe\x44\xca\x2a\xa4\x72\x91\x8f\x15\x9a\x4f\x17\xa3\x9a\x20\x4d\x30\x1a\xf8\x20\x8f\x86\xd1\x7d\x8a\x03\xe3\xf9\x10\xd6\x13\xc2\x18\x57\xfd\xc5\x34\x3c\x3f\x46\xa0\xe5\xe1\xdd\x81\x93\xc7\xdb\x96\x3d\x96\x7c\xfd\x28\xf3\x8c\x36\xf5\x44\x72\x4e\x94\xa0\x61\x92\x8e\x67\xad\x20\x4b\xfd\x62\x83\x41\x27\x1d\x74\xb2\x2e\x1e\xde\x24\x14\xce\x6c\xae\x71\x1e\x3c\xd2\xf0\x5f\x41\xc3\xc8\xa8\xd2\x70\x6f\x87\xeb\x42\x62\x09\xb3\xef\x3d\xdd\xff\xe6\xb3\xe8\x94\x6d\xf5\x8d\x66\x84\x71\x54\xfc\x71\xce\xc6\x93\x81\xc9\xaf\xde\x97\x83\x83\xfd\x8d\xd9\xc4\x86\xeb\x4b\x99\xbb\xba\x0e\xbb\x79\x21\xa0\x30\xda\x2b\x28\xa8\xde\x56\xeb\xa3\x4c\xec\x56\x6f\x51\x7f\xd2\x12\xc9\x6e\x55\x17\x9e\x88\x6b\x64\x82\xe4\x46\x86\x09\xa8\xda\x22\x63\x50\x12\xa9\x41\x6c\xfe\xb4\xd4\xc6\x55\x58\x13\x06\x49\xe2\x64\x99\xda\x82\x7b\x50\xa2\x92\x19\x0e\x03\x14\x38\x67\x06\x09\x09\x3d\xf1\xe2\x74\x4c\x33\x40\xd4\xeb\x00\xdd\x02\x5a\x3f\x7a\xfd\x24\x3c\x26\x89\x87\x72\x30\xf1\x3f\xa3\xc6\xfc\x02\xfa\xaf\xa8\x40\x6d\x45\xc5\x72\x50\x25\x66\x74\xb3\x07\xd2\x65\xaf\xde\x12\xdd\xee\xae\x11\xf0\x0e\xb3\x4a\x63\x3e\xc2\xf9\xc8\xa5\x23\x8e\xf3\x3f\x3a\xd5\x4c\x3c\x83\x3a\x6b\x95\x2a\x4d\x74\xa5\xd2\x4c\xe4\x08\x73\xf7\xc7\xa4\x21\x7e\x46\xe4\x3c\xaf\xcc\x3d\x73\x86\x11\xb5\xd7\x82\x4a\x8b\xfe\x4e\x94\x24\x82\x27\x35\x91\x94\xac\x19\xc2\xd5\x6f\xe7\xad\xe1\x4e\x0a\x24\x09\x55\x49\x13\xb2\x44\x55\x6b\xa5\xa9\xae\x8c\xb0\x87\x2e\xda\xcd\x4d\x7b\x43\x79\x0e\x84\x83\xd1\x96\xb4\xc9\x69\xa7\x16\x16\x00\x43\xbf\x95\x4a\x21\xb4\xbd\x33\xd8\xfd\xdb\x2d\x65\x08\x1a\x95\xc9\xb4\x01\x91\x71\xd7\xcc\x47\x75\x4b\x96\x6c\x60\x36\x24\x5d\x1d\xf5\x1e\x0d\x40\xd8\xa8\xe7\x78\xdb\xbb\x32\xb5\x57\x96\x45\x46\xf4\xe3\x52\x96\x81\x18\xba\x81\x35\x16\x94\x5b\x20\xb5\x47\xfa\xbd\x6f\x89\xaf\x40\xc8\xe6\x04\x11\x55\x2f\x4e\xbd\xe4\x7c\x15\x34\x81\x68\xe0\xc7\x22\xc2\xc6\x35\xe0\xf7\xc2\x32\xdc\x7e\x09\x7a\x4b\x15\x28\x2d\x69\xa9\x2c\xe0\x31\xa2\x34\x94\x44\x6f\x4d\x75\x96\x82\x23\xd7\xb0\x91\x62\x67\x37\xcd\xfa\x51\xd8\xa0\x06\xf1\x58\x34\xef\x2a\x83\xe5\x7b\x50\x98\xc3\xa1\xba\x5f\x7d\xfd\xbe\xfa\xf6\xd3\xfc\xfe\xfe\x70\x19\x62\xcd\x38\x21\x0f\x0e\x8c\x05\x0c\x4d\x6a\x66\xc6\x01\x49\x82\x77\x19\xab\x14\xad\x23\x7b\x1c\x66\xd6\xbf\x8b\xd4\x4d\x2f\xbc\xda\xad\x51\xa6\x62\x93\x66\xbb\x3c\x25\xb2\x50\xe9\xad\x48\x45\xa9\xd5\x12\x4e\xe1\x78\x06\xc9\x1d\xe9\x5d\x6a\x3f\x49\x0e\xb3\xb3\x76\x85\x34\x38\x45\xb3\x58\xe7\x9f\x4d\xa3\xbf\xbf\xe9\xb7\xfa\x7f\xd9\x12\x5e\xa0\x75\xb6\x51\x66\x40\x3c\xa7\x12\x33\x2d\xe4\x1e\xb4\x70\x3d\x49\x66\xde\xa2\xd8\xd8\xc5\x66\x0e\x99\xda\xc2\x1e\x02\x5b\x0b\xcf\xfb\x15\xa3\x37\xab\xa4\x34\x39\xf2\xe3\x9c\xd4\x0e\x36\x7d\x90\xae\x71\x27\x6a\x54\x20\x38\x9a\xba\xda\x55\x4c\xd3\x92\x79\x87\xb7\xa3\x0d\x61\xcc\x58\x48\x25\x64\x82\x6b\xe4\x5a\x4d\x64\x10\x72\x55\x49\x04\xcf\xa0\x33\xb8\x95\xa4\x2c\x51\xc2\x46\x48\xc8\xb1\x74\x2d\x8d\x72\xa5\x09\x63\xae\xb0\x72\x2c\x91\xe7\xc8\x33\x8a\x0a\x28\xb7\x6b\xd1\x99\x92\x2b\x8d\x24\xb7\xe3\x06\xf2\x5c\xc8\xa9\xac\x36\x4d\x0b\x7c\xab\xdf\xdc\x95\x42\xb9\x28\xaa\x4c\xd2\x52\x8f\x1a\x71\x4d\x58\x82\x79\x6b\x6d\x1b\x6a\x3b\xc7\x4c\x64\x95\xf7\x58\xd8\x59\x65\xbb\xbf\x37\x1e\x38\x1a\xb6\x87\x85\xa8\xb4\xa2\x39\x46\x13\x7e\x39\x91\x45\x76\xd2\x08\xfc\xf4\xce\xac\x90\xb5\xa8\x34\x10\xbe\x6f\xcd\x9a\x48\x9d\x7d\x43\x0e\xd4\xfd\x22\xd1\x02\x10\xcf\x01\xb9\xed\xc5\x64\x90\xd9\x8c\xf2\x1b\xa0\xba\xc5\x83\x36\x2e\x1d\x26\xcc\x0e\x5e\xc2\x64\xc6\x75\x2f\x72\xd6\xb8\xcf\xa6\x5d\xb4\x81\x31\xdb\x94\x30\xfa\x07\xba\x14\x57\x2d\xa9\x69\xed\xb6\x14\x08\x64\x28\x35\xa1\x7c\x72\x54\xb0\x3e\x08\xfc\xf6\xde\xac\x3c\x01\x49\xce\x65\x54\xf9\xbe\x9a\xc8\x1c\xa5\x87\xe6\x28\x6d\x31\x08\xef\xa8\xb2\xd3\x78\x67\xc5\x54\x40\xc4\x44\x46\xd8\x85\x03\x19\xa7\xf4\xa2\x45\x1c\x02\x4d\x67\x71\xcd\x7b\x2f\x2a\x69\xa3\xa2\xf6\x4a\xe3\xce\x80\x4c\x5b\x47\x53\x07\xc6\x40\xf3\xaf\x16\xb8\x5a\x4f\x7c\xb0\x60\x6d\xf1\xce\xad\x8f\x3a\x9a\x67\xc3\x44\x99\x1b\xbc\x4b\x7a\x99\x4b\xb8\x01\xb6\xca\x4c\x23\x5a\x38\xaa\x2e\x45\xfb\xf4\xb5\x99\x3b\xb5\x63\x14\xea\xaa\x0c\x01\xd8\x96\xb7\xf2\x12\x95\x72\x17\xaa\x29\x21\xb6\x19\xdf\x3d\xbd\x9f\xb6\xe2\x16\x28\xdf\x88\x06\xd5\xac\xca\xb6\x6a\xa6\x3e\x76\xc5\x69\x9b\xa1\x8d\xfa\x2f\xdd\xca\x20\x4b\x7f\xe0\x1c\x53\x71\x1f\x30\x9c\x15\x66\x45\xc5\x11\xb4\xb7\xc7\x6b\xcc\xfa\x50\x59\xd8\xb1\xb9\x33\x95\x5d\xee\x81\xc4\xb7\xab\x59\x09\xe7\x83\x35\xe5\x44\xee\x2d\xfa\x4b\xfb\x40\x61\xf0\xff\x07\xf6\xe5\x1a\xa5\x32\x97\xb4\xde\xae\x2b\x49\xb9\x6e\xcb\xd8\x6d\xfa\x2f\x22\x6e\x76\xd8\x8b\x0a\x88\x34\x05\x46\x79\x31\x0b\xee\x9b\x56\x77\x5d\xa4\x76\x2b\x6d\x5a\x48\x77\xff\xcb\x76\x39\x2c\x9a\x45\x46\x39\x42\x22\xca\x6c\x19\xf9\xd5\x29\xdb\xe5\x4b\x48\x0a\x0d\xc7\xc3\xd7\xbc\xf6\x87\x5b\x38\xb5\x54\x5f\x4f\xbe\x0d\x1e\xf4\x9a\x5b\xf1\xbf\xa2\x4f\xdc\xfe\xbd\xf9\x38\x76\x59\x2e\x50\xa7\xc1\xef\x72\xf6\x5e\xdb\x2a\xb5\xbf\x14\x40\xb2\x23\x77\x39\x96\x7a\x0b\xff\x86\x64\x47\x79\xf7\x7f\xbd\x2f\x11\xf2\xe6\x1a\xa4\x4e\x03\xae\xd3\x53\xb8\x77\x2f\x6f\x49\x0d\x87\xdf\x0b\x21\x0a\x86\x47\x85\x60\x84\x17\x47\x42\x16\xab\xc3\xa7\xd5\x9d\x78\xea\x4e\x9e\xab\xee\x2f\xea\x8a\x1d\x8d\xfd\xb3\x47\x7b\x52\x5d\x5c\xd7\x03\x51\xed\x4a\x3c\x8c\xef\x28\xea\xa3\x9f\x9a\x1e\x90\xd7\xfc\xf2\xf5\x94\xb0\x87\x1f\xb6\x23\x15\xfc\x40\xfd\x74\x37\x58\x57\xb5\xb3\x45\xf3\x9e\x1b\x1f\x86\x1f\x12\xd2\xdc\xb0\xfe\x96\x8c\x0e\xe6\x9d\x94\xc3\xc5\x23\xee\x5d\x1e\xfe\x19\xc9\xfe\x94\x33\x12\x3e\xf0\xf5\xf2\xf0\xe0\xff\x01\x00\x00\xff\xff\xd4\x7b\x24\x6f\x46\x22\x00\x00")

func dataFishBytes() ([]byte, error) {
	return bindataRead(
		_dataFish,
		"data/fish",
	)
}

func dataFish() (*asset, error) {
	bytes, err := dataFishBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/fish", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\x6d\x6f\xdb\x36\x10\xfe\xae\x5f\x71\x65\x85\xd6\x2e\x90\x08\xde\x47\x07\xde\x92\x20\x41\x1a\x20\x8d\x0d\x3b\xdd\x30\x64\xad\x40\x4b\xb4\x24\x58\x16\x35\x92\x52\x92\xc5\xf9\xef\x83\x48\x9b\x12\x25\xfa\x65\x5b\x97\x2f\x85\x75\x2f\xe4\xdd\xf3\xdc\x73\xec\xfb\x77\xde\x3c\xc9\x3c\x1e\x3b\x4e\x19\xf5\xfa\xf0\xea\x00\x00\x04\x98\x13\x40\xee\x00\x41\x92\xc9\x0f\xd5\x5f\x92\x25\xa2\xaf\x7f\x55\x7f\xbe\x5f\x46\x7e\xf5\x19\x90\xfb\x7a\x3e\xfc\xe9\x0d\x19\xe6\xb3\x33\xfd\x13\x07\x22\x29\xb1\x20\x96\xf8\xad\xe9\x60\x8e\x90\xec\xc9\x52\x1b\x0f\xe6\x09\xc2\x1c\x07\x4b\x1c\x11\x6e\xc9\x53\x1b\x8f\xb8\x0f\x17\x8c\xbe\x58\x2f\x23\x2d\x07\x33\x44\x29\x9d\xe3\xf4\xfa\x99\x04\x96\x24\xb5\xf1\x60\x9e\x22\x8f\x18\x0e\x6d\x6d\xd9\x58\x0e\x66\xf8\x64\xc6\x06\x74\xb5\xc2\x59\x08\x65\x04\xc8\x3d\x57\x51\x84\xe3\xc0\x71\xde\x1c\x47\xa3\xae\xe9\x52\x46\xd0\xe8\xfe\xc6\xbf\x8c\x20\x4d\xb2\xa5\x8e\xa8\x3b\xab\xe3\x92\x05\x3c\xc2\xc9\x5f\x80\xdc\x5f\x6f\xa7\x0f\x5f\x2f\xee\x6e\xc6\x08\xbe\x9d\x81\x88\x49\x4d\x3b\x12\xc4\x14\xae\x19\xa3\x6c\x08\xf7\x14\xca\x84\x89\x02\xa7\x11\x85\x27\xca\x96\x3c\xc7\x01\x81\x84\xab\xf3\x09\x60\x51\x05\xc3\x8a\xae\x48\x26\x74\x8a\x32\x82\x98\xa4\x79\x03\x79\x6d\x62\x44\x14\x2c\x83\x81\xfc\xb0\x48\x14\xfb\xc3\xe6\x8d\xfc\xc9\xc5\xc3\x67\x8f\xb3\xc0\x43\x55\x2d\x8e\x41\xda\x56\x29\xd9\xfe\x52\xca\xa8\x41\xe2\xed\x89\xaa\xb9\xcf\x39\x65\x02\x74\xec\xc8\xed\x95\x91\x9c\xb8\x19\x11\x22\xc9\x22\x2e\x1b\xdb\xdf\x78\x57\x2d\x41\x17\x2a\x51\x92\x45\xd0\x38\xd4\x9e\x4f\x16\x31\x72\x5f\xeb\x0f\xd3\xf1\xf8\x61\x78\xe2\x7e\x1e\x7f\xb9\xf6\x4e\x75\x53\xdf\xbc\x3a\x95\x91\xc9\xaf\x23\xc7\x77\x57\x93\xd9\x60\xe4\x4e\x66\x83\xdd\x1e\x37\x63\x75\xa2\xfa\x77\x4f\x26\xe9\x25\x7d\x5a\x7d\xbc\x19\x5f\xde\xde\x5b\xe8\x60\x3f\xed\xf2\xf6\x7e\xa4\x42\xd4\x59\x29\x27\x47\x85\xd8\x6e\x5d\x29\xa2\x81\x8e\x1a\x45\x7f\x81\xd3\x74\x8e\x83\xa5\x02\xe7\xcf\x82\xb0\x97\x2d\x3a\xfd\xc6\xed\x91\xdb\xf2\x47\x30\x02\x24\x58\x41\x76\x56\xb3\xed\x96\x89\xd7\xd0\xe8\x9e\xa5\x22\x7b\x98\x8d\x58\x9b\x6a\x5b\xa4\xde\xd6\xb9\x71\x92\xc9\x36\x8d\x1f\x4a\x4c\xd0\xae\x31\xf5\xaf\x6e\x67\x17\x97\x77\xd7\xfe\x64\x3a\xfe\x32\x79\xd8\x59\x58\x45\x14\xd4\xab\xe3\xfa\x50\xd1\x06\x19\x57\x5c\x2d\xc3\x84\xc1\x49\xbe\x6b\xe8\x5a\x3e\x8a\x17\x4e\x5b\x78\xa6\x04\xa7\x5a\x6b\xea\x29\xfb\x4f\x5a\xf3\xaf\x44\xa6\x35\xe1\x36\x91\x69\x0c\xf1\xd5\xd6\x7b\xdf\x18\xcb\x71\xeb\x4c\xa0\x05\x5f\x0b\xc5\x1d\x0b\x5f\x6c\xa4\xef\x10\xa1\x7d\xa0\x1e\xd1\x22\xe3\xa4\x21\x2d\x5d\x69\xb0\x8c\xb8\x6d\xf8\xac\x8a\xd1\x92\xac\x06\xa2\x72\xa5\x5a\xe0\x1c\x74\x61\x3c\x0a\xeb\x1f\xb4\x5b\x4c\xe8\xe5\x25\x0d\x9b\x81\x7d\x63\xc9\x80\xb9\x66\xeb\x27\x43\x83\x03\xad\xb9\xb7\xba\x9f\x9b\xc3\x64\xdf\x43\xf0\xe1\x03\xbc\x83\x57\xb5\x93\xb9\x80\x35\x44\x8c\xe4\x80\xbe\xd7\x5e\x7f\xb8\x08\x7e\x06\x2f\x24\xa5\x97\x15\x69\x7a\x06\x6f\xc7\x2c\xaf\x7a\x21\x16\x82\x76\xb7\xe2\x96\xdb\x34\xf3\x19\xa5\x62\xe4\x4e\x7e\xbb\x92\x86\xa7\x38\x49\x89\xd4\xca\x96\x0b\x82\x77\x23\x40\x12\xad\x90\xb6\x00\x5d\x74\xdd\x1b\xab\xcb\x8e\x70\x46\x9e\x7c\xed\xe2\x67\x78\x45\x46\x6e\x2f\xc0\x62\x7f\x2a\xf3\x35\xa4\x54\x5d\xaa\xb8\xd9\xd5\xf5\x5a\x96\xd0\x3d\x43\x55\x71\x88\x7d\xd0\x79\x3a\x59\x32\x19\x11\x0d\xee\xd4\xdc\xb2\x31\xeb\x3d\x88\x38\xe1\xc0\x05\x4b\x72\x2e\x69\x9b\x62\x2e\x20\xc7\x22\xae\x68\x94\xd3\x8c\x64\x02\x16\x8c\xae\xa4\xb1\xfa\x7e\xda\x7e\xac\xd7\xa8\xf5\x94\x56\x75\xb1\x5a\x03\x27\x21\x7c\xe4\x6b\xef\xf1\xbb\xf7\xed\x93\xbb\x5e\x7f\x54\xad\x0b\x69\x46\xf4\xec\x6e\x1e\xa1\x9a\x15\x34\x0d\xeb\x2a\x1b\x4b\xe9\xf8\x87\x54\x4b\xe4\xbb\xba\xfa\x35\x0f\x95\xa4\xea\x73\xd4\x22\xa7\x10\x11\x01\x27\x05\x44\x89\x88\x8b\xf9\x69\x40\x57\xde\x0d\x11\x33\xc1\x08\x5e\x79\x65\xd4\x48\x31\x25\x29\xc5\x61\x95\xa3\xea\x10\x8f\x49\x9a\x42\x8e\x99\x00\xba\xf8\xc7\x59\xf5\x9d\x99\x4c\xda\x1e\x55\xa3\x21\x9b\x71\x7d\x34\x3b\x20\xf9\xd4\xf6\xb3\x6d\x2f\x34\x35\x36\x8a\x19\xe2\xd8\x69\x67\x71\x52\xb3\xdd\xfa\x8f\xc8\x71\xea\xdb\x14\xd5\xdf\x69\x01\x3c\xa6\x45\x1a\x02\xcf\x49\x90\x2c\x5e\x00\x6b\x1d\x13\x31\x16\x5b\xeb\x9c\x00\x79\x26\x41\x21\x48\xd8\xd9\xa8\xf5\x05\xf6\x6f\xd4\x9d\xbc\xfa\x31\xc4\xd2\x5a\xab\x0e\xf7\x03\x1a\x92\x91\xfb\xcb\xff\x04\xe6\x31\x08\x35\x3a\xe1\x36\x2e\x25\x55\xd9\x22\xcb\xce\xdf\x01\x00\x00\xff\xff\x1f\xa9\xee\x6a\xed\x0f\x00\x00")

func dataShBytes() ([]byte, error) {
	return bindataRead(
		_dataSh,
		"data/sh",
	)
}

func dataSh() (*asset, error) {
	bytes, err := dataShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataZsh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x54\x5d\x8b\xdb\x30\x10\x7c\xf7\xaf\xd8\xea\x0e\x9a\x3c\x84\xfb\x05\x85\x96\xf6\xa0\x85\xbe\x95\x96\x42\x29\x61\x23\xad\x6d\x11\x45\x52\xb5\x2b\xe7\x72\xc7\xfd\xf7\x62\xe5\x53\xae\xa1\x6f\x61\xb4\x9a\x99\xcd\x8c\x75\xf7\xe6\x61\x63\xfd\xc3\x33\xf7\x4d\xb3\x5e\x0f\xdd\x3a\x91\x0b\x68\x16\x4b\x78\x69\x00\x00\x68\x40\x07\xea\x7e\x31\x74\xc7\x9f\xab\x15\xf7\xe4\x1c\x3c\x73\xbf\x54\xcd\x6b\xd3\xe8\x3e\xee\xcd\xba\xcd\x5e\x8b\x0d\x9e\xdf\x2d\xee\x5f\x26\xd0\xaf\xf7\xbf\x5f\x41\x15\x72\xcc\x12\xd6\xa8\xc5\x0e\x28\xa4\x96\x27\x49\x1d\x76\xd1\x51\x99\xbd\xe8\x8e\x18\x1a\x03\xe7\xe1\x0a\xd4\x26\xa2\xde\x62\x47\x5c\xc1\x86\x66\xa7\x0d\xb1\xa4\x70\xa8\x30\xf2\x9c\x53\x3d\x36\xae\x57\x01\x9d\x0b\x1b\x74\x8f\x4f\xa4\x2b\xb8\x27\x17\x2b\xc0\x7a\x2b\x05\xb8\xab\xa0\x6f\x24\x62\x7d\x57\x5b\x74\xd6\x6f\x27\x00\x4b\x0d\x04\x8d\xee\x8b\x67\x41\x57\xdb\xd9\x85\x81\x7e\x90\x37\x21\x4d\xc4\xfe\x64\x4a\x87\x59\x35\x26\xc9\xb5\x57\x16\x94\x5c\x0f\x65\x6f\x67\xd4\xb2\xff\xc7\x6a\x8e\x5d\x42\x53\xff\x69\x03\x25\xb6\xc1\x4f\x1c\xad\x7e\x82\xfa\x70\x8a\x02\x10\x38\x92\xb6\xad\xd5\x30\xd8\x24\x19\x5d\x17\x60\x1f\xd2\x96\x23\x6a\x52\x75\xc2\x35\xc7\xa7\x4b\xa0\x20\x3d\x81\xce\x29\x91\x97\x79\x9a\x49\xf8\x13\x33\xb0\x4f\x18\x23\x25\x68\x43\x02\x43\x11\xa4\x47\x81\xd3\xe2\x5c\xd8\x0d\x45\xf2\x86\xbc\xb6\xc4\x60\x7d\xc1\x66\x94\xca\x25\x42\x03\xa1\x85\xa1\xc4\xa1\x6e\xdb\x54\xeb\x3e\x3e\xc5\xc0\x47\xf3\xac\x93\x8d\x72\xd4\xe5\x3e\x64\x67\x60\x43\xa5\x74\x2b\x32\x67\xbd\xf3\x86\xe5\x1b\x53\xd7\x4a\xd6\xac\x9f\xc9\x45\xc0\x4d\xc8\x02\xe8\x0f\xe3\xd1\x0e\xbd\x51\xd7\x66\xd6\xe3\x1f\x13\x95\x1c\xfc\x58\x7b\xdc\xb8\x31\x92\xeb\x3a\x23\x3c\x46\x0d\x56\x40\x42\xe5\xc2\xd8\x44\x5a\x42\x3a\xa8\xb9\x8e\x8f\xd4\x5f\xc7\x8b\xff\x89\xe6\xc8\x6a\xf9\x96\xee\xd2\xad\x9a\xee\x7b\x29\x1d\xcf\x9b\x80\x36\x85\x5d\x39\xba\xc9\x42\xde\x72\x21\x23\x03\x12\xd4\xb9\xb5\xe5\x5d\x0a\xbb\x68\xa8\x85\xe9\x0b\x03\x43\xd7\xfc\x0d\x00\x00\xff\xff\x36\x38\x3a\x01\xf5\x04\x00\x00")

func dataZshBytes() ([]byte, error) {
	return bindataRead(
		_dataZsh,
		"data/zsh",
	)
}

func dataZsh() (*asset, error) {
	bytes, err := dataZshBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/zsh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/bash": dataBash,
	"data/fish": dataFish,
	"data/sh": dataSh,
	"data/zsh": dataZsh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"bash": &bintree{dataBash, map[string]*bintree{}},
		"fish": &bintree{dataFish, map[string]*bintree{}},
		"sh": &bintree{dataSh, map[string]*bintree{}},
		"zsh": &bintree{dataZsh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


#!/bin/fish/

function vg
    if not count $argv > /dev/null
        command vg
        return
    end
    # echo $argv[1]
    switch $argv[1]
        case init
            _vg_init $argv[1..-1]
        case activate
            _vg_activate $argv[1..-1]
        case deactivate
            _vg_deactivate
        case cdpackages
            _vg_cdpackages
        case destroy
            _vg_destroy $argv[1..-1]
        case globalExec
            _vg_globalExec $argv[1..-1]
        case upgrade
            _vg_upgrade
        case '*'
            command vg $argv
    end
end


function _vg_init
    _vg_activate $argv
    vg link
end

function _vg_cdpackages
    if [ -z "$VIRTUALGO" ]
        echo Error: No virtualgo workspace is active at the moment
        vg help cdpackages
        return 1
    end
    cd $VIRTUALGO_PATH/src/
end

function _vg_activate
    if [ -n "$VIRTUALGO" ]
        _vg_deactivate
    end

    if [ (count $argv) -lt 2 ]
        set argv[2] (basename $PWD)
    end

    set workspace (vg initSettings $argv[2..-1])

    set -gx VIRTUALGO $workspace
    echo Activating $VIRTUALGO
    set -gx VIRTUALGO_PATH $HOME/.virtualgo/$VIRTUALGO

    set -gx _VIRTUALGO_OLDGOPATH $GOPATH
    if [ -n "$GOBIN" ]
        set -gx _VIRTUALGO_OLDGOBIN $GOBIN
    else
        set -gx _VIRTUALGO_OLDGOBIN $_VIRTUALGO_OLDGOPATH/bin
    end

    set -gx _VIRTUALGO_OLDPATH_FISH $PATH
    set -gx _VIRTUALGO_OLDPATH_SH (echo -s :$PATH | cut -b 2-)

    set global_fallback (vg querySettings)

    if [ $global_fallback = true ]
        set -gx GOPATH $VIRTUALGO_PATH${GOPATH:+:${GOPATH}}
    else
        set -gx GOPATH $VIRTUALGO_PATH
    end

    set -gx GOBIN $VIRTUALGO_PATH/bin

    mkdir -p $VIRTUALGO_PATH/src/
    mkdir -p $GOBIN

    set -gx PATH $GOBIN $PATH

    if [ -z "$VIRTUALGO_DISABLE_PROMPT" ]
        functions -c fish_prompt _old_fish_prompt
        function fish_prompt
            echo -n "($VIRTUALGO) "
            _old_fish_prompt
        end
    end
    vg activateReal
end

function _vg_deactivate
    if [ -z "$VIRTUALGO" ]
        echo Error: No virtualgo workspace is active at the moment
        vg help deactivate
        return 1
    end

    echo Deactivating $VIRTUALGO

    set -x GOBIN $_VIRTUALGO_OLDGOBIN
    set -x GOPATH $_VIRTUALGO_OLDGOPATH
    set -x PATH $_VIRTUALGO_OLDPATH_FISH

    if [ -z "$VIRTUALGO_DISABLE_PROMPT" ]
        functions -e fish_prompt
        functions -c _old_fish_prompt fish_prompt
        functions -e _old_fish_prompt
    end

    set -e VIRTUALGO
    set -e VIRTUALGO_PATH
    set -e _VIRTUALGO_OLDPATH_FISH
    set -e _VIRTUALGO_OLDPATH_SH
    set -e _VIRTUALGO_OLDGOBIN
    set -e _VIRTUALGO_OLDGOPATH
end

function _vg_destroy
    if [ (count $argv) -lt 2 ]
        if [ -z "$VIRTUALGO" ]
            echo Error: No virtualgo workspace is active at the moment
            vg help destroy
            return 1
        end
        set argv[2] $VIRTUALGO
    end

    command vg destroy $argv[2..-1]

    if [ -n "$VIRTUALGO" ]; and vg list | not grep "^$VIRTUALGO\$" > /dev/null
        vg deactivate
    end
end

function _vg_upgrade
    set -l old_virtualgo $VIRTUALGO
    if [ -n "$VIRTUALGO" ]
        _vg_deactivate
    end

    echo Updating virtualgo
    go get -u github.com/GetStream/vg

    echo Reloading the shell part of virtualgo
    go get -u github.com/GetStream/vg
    vg eval --shell fish | source

    if [ -n "$old_virtualgo" -a "$VIRTUALGO" != "$old_virtualgo" ]
        echo Reactivating $old_virtualgo
        vg activate $old_virtualgo
    end
end

function _vg_globalExec
    if [ (count $argv) -lt 2 ]
        echo Error: You should specify a command that should be executed
        vg help globalExec
        return 1
    end

    set -l old_virtualgo $VIRTUALGO
    if [ -n "$VIRTUALGO" ]
        _vg_deactivate
    end

    eval $argv[2..-1]
    set status_code $status

    if [ -n "$old_virtualgo" -a "$VIRTUALGO" != "$old_virtualgo" ]
        vg activate $old_virtualgo
    end
    return $status_code
end

function __vg_auto_activate --on-variable PWD
    if status --is-command-substitution
        return
    end

    # find an auto-activation file
    set -l activation_root $PWD
    while test $activation_root != ""
        if test -f "$activation_root/.virtualgo"
            set new_virtualgo_name (cat "$activation_root/.virtualgo")
            if begin not set -q VIRTUALGO; or test $new_virtualgo_name != $VIRTUALGO; end
                vg activate $new_virtualgo_name
            end
            return
        end
        # this strips the last path component from the path.
        set activation_root (echo $activation_root | sed 's|/[^/]*$||')
    end
end

__vg_auto_activate

complete -c vg --exclusive

complete -c vg -n "test (__fish_number_of_cmd_args_wo_opts) = 1" -xa activate      -d "Activate a specific virtualgo workspace"
complete -c vg -n "test (__fish_number_of_cmd_args_wo_opts) = 1" -xa cdpackages    -d "Change the working directory to the src directory of the active workspace"
complete -c vg -n "test (__fish_number_of_cmd_args_wo_opts) = 1" -xa deactivate    -d "Deactivate the current virtualgo workspace"
complete -c vg -n "test (__fish_number_of_cmd_args_wo_opts) = 1" -xa destroy       -d "Removes one or multiple workspace and all their contents"
complete -c vg -n "test (__fish_number_of_cmd_args_wo_opts) = 1" -xa ensure        -d "A wrapper for dep that installs the dependencies in the virtualgo workspace instead of vendor"
complete -c vg -n "test (__fish_number_of_cmd_args_wo_opts) = 1" -xa eval          -d "Expose the script that should be eval-ed in the current shell"
complete -c vg -n "test (__fish_number_of_cmd_args_wo_opts) = 1" -xa globalExec    -d "Execute a command globally (outside the active workspace)"
complete -c vg -n "test (__fish_number_of_cmd_args_wo_opts) = 1" -xa help          -d "Help about any command"
complete -c vg -n "test (__fish_number_of_cmd_args_wo_opts) = 1" -xa init          -d "Create and enable a workspace and link it to the current directory"
# complete -c vg -n "test (__fish_number_of_cmd_args_wo_opts) = 1" -xa initSettings  -d "This command initializes the settings file for a certain workspace"
complete -c vg -n "test (__fish_number_of_cmd_args_wo_opts) = 1" -xa link          -d "Link the current virtualgo workspace to this directory"
complete -c vg -n "test (__fish_number_of_cmd_args_wo_opts) = 1" -xa list          -d "List all existing workspaces"
complete -c vg -n "test (__fish_number_of_cmd_args_wo_opts) = 1" -xa localInstall  -d "Installs a package from your filesystem inside the workspace"
complete -c vg -n "test (__fish_number_of_cmd_args_wo_opts) = 1" -xa moveVendor    -d "Moves the vendor directory to the workspace"
# complete -c vg -n "test (__fish_number_of_cmd_args_wo_opts) = 1" -xa querySettings -d "This can be used to query certain settings for a workspace"
complete -c vg -n "test (__fish_number_of_cmd_args_wo_opts) = 1" -xa setup         -d "Enables virtualgo in your shell"
complete -c vg -n "test (__fish_number_of_cmd_args_wo_opts) = 1" -xa status        -d "Show info about your current workspace"
complete -c vg -n "test (__fish_number_of_cmd_args_wo_opts) = 1" -xa uninstall     -d "Uninstall a package from the active workspace"
complete -c vg -n "test (__fish_number_of_cmd_args_wo_opts) = 1" -xa unlink        -d "Unlinks the current directory from the workspace it's linked to"
complete -c vg -n "test (__fish_number_of_cmd_args_wo_opts) = 1" -xa upgrade       -d "Upgrade the virtualgo binary and reload it in the current shell"
complete -c vg -n "test (__fish_number_of_cmd_args_wo_opts) = 1" -xa version       -d "Prints the version of virtualgo that you are using"

function __fish_vg_using_command
    set cmd (commandline -opc)

    if [ (count $cmd) -gt 1 ]
        if [ $argv[1] = $cmd[2] ]
            return 0
        end
    end

    return 1
end

function __vg_get_packages
    find $argv[1]/src/ -maxdepth 3 -mindepth 3 -type d | sed s=$argv[1]/src/== | grep -v '^google.golang.org/'
    find $argv[1]/src/ -maxdepth 2 -mindepth 2 -type d | sed s=$argv[1]/src/== | grep '^google.golang.org/'
    find $argv[1]/src/ -maxdepth 3 -mindepth 3 -type l | sed s=$argv[1]/src/== | grep -v '^google.golang.org/'
    find $argv[1]/src/ -maxdepth 2 -mindepth 2 -type l | sed s=$argv[1]/src/== | grep '^google.golang.org/'
end

function __vg_get_workspace_packages
    __vg_get_packages $VIRTUALGO_PATH
end

function __vg_get_global_packages
    __vg_get_packages $_VIRTUALGO_OLDGOPATH
end

complete -c vg -n "__fish_vg_using_command activate" -xa "(vg list)"
complete -c vg -n "__fish_vg_using_command destroy" -xa "(vg list)"
complete -c vg -n "__fish_vg_using_command uninstall" -xa '(__vg_get_workspace_packages)'
complete -c vg -n "__fish_vg_using_command localInstall" -xa '(__vg_get_global_packages)'
